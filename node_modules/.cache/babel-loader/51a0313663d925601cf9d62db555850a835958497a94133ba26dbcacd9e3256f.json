{"ast":null,"code":"var _jsxFileName = \"/Users/andytruong/motion-alarm/react-website-alarm/src/System.js\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from 'react';\nimport AlarmDetails from './AlarmDetails';\nimport './System.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst System = () => {\n  _s();\n  const [alarms, setAlarm] = useState(null);\n  useEffect(() => {\n    const fetchAlarmStatus = async () => {\n      try {\n        const response = await fetch('/api/alarmStatus/');\n\n        // Check if the response is not okay (e.g., 404 or 500 errors)\n        if (!response.ok) {\n          throw new Error('Network response was not ok.');\n        }\n        const json = await response.json();\n        console.log(json);\n        setAlarm(json);\n      } catch (error) {\n        console.error('Error fetching data:', error.message);\n        // Handle the error (e.g., show a message to the user)\n      }\n    };\n    fetchAlarmStatus();\n  }, []);\n  useEffect(() => {\n    const eventSource = new EventSource('/events');\n    eventSource.onmessage = event => {\n      const data = JSON.parse(event.data);\n      // Handle the received data, e.g., update the UI or trigger notifications\n      console.log('Received data:', data);\n    };\n    return () => {\n      eventSource.close(); // Close the EventSource connection when unmounting\n    };\n  }, []);\n  useEffect(() => {\n    const eventSource = new EventSource('/events'); // Connect to the SSE endpoint\n\n    eventSource.onmessage = event => {\n      const data = JSON.parse(event.data);\n      console.log('Received SSE:', data);\n      // Handle the received SSE data (lockStatus) and update UI accordingly\n      // Example: Update state based on received SSE data\n      setAlarm(prevAlarms => [...prevAlarms, data]); // Add the new data to alarms state\n    };\n    return () => {\n      // Cleanup: Close the event source connection when the component unmounts\n      eventSource.close();\n    };\n  }, []);\n  const [isDarkMode, setIsDarkMode] = useState(false);\n  useEffect(() => {\n    // Check for saved preference in local storage\n    const savedMode = localStorage.getItem('darkMode');\n    if (savedMode) {\n      setIsDarkMode(JSON.parse(savedMode));\n    }\n  }, []);\n  useEffect(() => {\n    // Update class on the body based on dark mode state\n    document.body.classList.toggle('dark-mode', isDarkMode);\n    document.body.classList.toggle('light-mode', !isDarkMode);\n\n    // Save preference to local storage\n    localStorage.setItem('darkMode', JSON.stringify(isDarkMode));\n  }, [isDarkMode]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"system\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"statuses\",\n      children: alarms && alarms.map(alarm => /*#__PURE__*/_jsxDEV(AlarmDetails, {\n        alarm: alarm\n      }, alarm._id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 80,\n    columnNumber: 9\n  }, this);\n};\n_s(System, \"rNtENByYAYzc8/wZX+LFeNxqycQ=\");\n_c = System;\nexport default System;\nvar _c;\n$RefreshReg$(_c, \"System\");","map":{"version":3,"names":["useEffect","useState","AlarmDetails","jsxDEV","_jsxDEV","System","_s","alarms","setAlarm","fetchAlarmStatus","response","fetch","ok","Error","json","console","log","error","message","eventSource","EventSource","onmessage","event","data","JSON","parse","close","prevAlarms","isDarkMode","setIsDarkMode","savedMode","localStorage","getItem","document","body","classList","toggle","setItem","stringify","className","children","map","alarm","_id","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/andytruong/motion-alarm/react-website-alarm/src/System.js"],"sourcesContent":["import {useEffect, useState } from 'react'\n\nimport AlarmDetails from './AlarmDetails';\nimport './System.css'\n\nconst System = () => {\n    const [alarms, setAlarm] = useState(null)\n    useEffect(() => {\n        const fetchAlarmStatus = async() => {\n            try {\n                const response = await fetch('/api/alarmStatus/');\n                \n                // Check if the response is not okay (e.g., 404 or 500 errors)\n                if (!response.ok) {\n                    throw new Error('Network response was not ok.');\n                }\n\n                const json = await response.json();\n                console.log(json);\n                setAlarm(json);\n            } catch (error) {\n                console.error('Error fetching data:', error.message);\n                // Handle the error (e.g., show a message to the user)\n            }\n        }\n        fetchAlarmStatus()\n    }, [])\n    \n    useEffect(() => {\n        const eventSource = new EventSource('/events');\n        eventSource.onmessage = (event) => {\n          const data = JSON.parse(event.data);\n          // Handle the received data, e.g., update the UI or trigger notifications\n          console.log('Received data:', data);\n        };\n    \n        return () => {\n          eventSource.close(); // Close the EventSource connection when unmounting\n        };\n      }, []);\n\n    useEffect(() => {\n        const eventSource = new EventSource('/events'); // Connect to the SSE endpoint\n    \n        eventSource.onmessage = (event) => {\n          const data = JSON.parse(event.data);\n          console.log('Received SSE:', data);\n          // Handle the received SSE data (lockStatus) and update UI accordingly\n          // Example: Update state based on received SSE data\n          setAlarm((prevAlarms) => [...prevAlarms, data]); // Add the new data to alarms state\n        };\n    \n        return () => {\n          // Cleanup: Close the event source connection when the component unmounts\n          eventSource.close();\n        };\n      }, []);\n\n    const [isDarkMode, setIsDarkMode] = useState(false);\n\n\n    useEffect(() => {\n        // Check for saved preference in local storage\n        const savedMode = localStorage.getItem('darkMode');\n        if (savedMode) {\n            setIsDarkMode(JSON.parse(savedMode));\n        }\n    }, []);\n\n    useEffect(() => {\n        // Update class on the body based on dark mode state\n        document.body.classList.toggle('dark-mode', isDarkMode);\n        document.body.classList.toggle('light-mode', !isDarkMode);\n\n        // Save preference to local storage\n        localStorage.setItem('darkMode', JSON.stringify(isDarkMode));\n    }, [isDarkMode]);\n\n    return (\n        <div className='system'>\n            <div className = 'statuses'>\n                {alarms && alarms.map((alarm) => (\n                    <AlarmDetails key={alarm._id} alarm={alarm} />\n                ))}\n                </div>\n        </div>\n    )\n}\n\nexport default System\n    "],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}