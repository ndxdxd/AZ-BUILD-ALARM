{"ast":null,"code":"var _jsxFileName = \"/Users/andytruong/motion-alarm/react-website-alarm/src/System.js\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from 'react';\nimport AlarmDetails from './AlarmDetails';\nimport './System.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst System = () => {\n  _s();\n  const [alarms, setAlarms] = useState(null);\n  const [logMessage, setLogMessage] = useState('');\n  const fetchAlarmStatus = async () => {\n    try {\n      const response = await fetch('/api/alarmStatus/checkUpdates');\n      if (!response.ok) {\n        throw new Error('Network response was not ok.');\n      }\n      const {\n        logMessage,\n        updatedData\n      } = await response.json();\n      setAlarms(updatedData);\n      setLogMessage(logMessage); // Set the received log message\n    } catch (error) {\n      console.error('Error fetching data:', error.message);\n      // Handle the error (e.g., show a message to the user)\n    }\n  };\n  useEffect(() => {\n    // Fetch alarm status initially\n    fetchAlarmStatus();\n\n    // Set up interval to poll for updates every 5 seconds\n    const intervalId = setInterval(fetchAlarmStatus, 5000);\n\n    // Clean up interval on component unmount\n    return () => clearInterval(intervalId);\n  }, []);\n  const [isDarkMode, setIsDarkMode] = useState(false);\n  useEffect(() => {\n    // Check for saved preference in local storage\n    const savedMode = localStorage.getItem('darkMode');\n    if (savedMode) {\n      setIsDarkMode(JSON.parse(savedMode));\n    }\n  }, []);\n  useEffect(() => {\n    // Update class on the body based on dark mode state\n    document.body.classList.toggle('dark-mode', isDarkMode);\n    document.body.classList.toggle('light-mode', !isDarkMode);\n\n    // Save preference to local storage\n    localStorage.setItem('darkMode', JSON.stringify(isDarkMode));\n  }, [isDarkMode]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"system\",\n    children: [logMessage && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Log Message: \", logMessage]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 28\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"statuses\",\n      children: alarms && alarms.map(alarm => /*#__PURE__*/_jsxDEV(AlarmDetails, {\n        alarm: alarm\n      }, alarm._id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 9\n  }, this);\n};\n_s(System, \"pVWGHD90Eunts9peiQ5j9DNKui0=\");\n_c = System;\nexport default System;\nvar _c;\n$RefreshReg$(_c, \"System\");","map":{"version":3,"names":["useEffect","useState","AlarmDetails","jsxDEV","_jsxDEV","System","_s","alarms","setAlarms","logMessage","setLogMessage","fetchAlarmStatus","response","fetch","ok","Error","updatedData","json","error","console","message","intervalId","setInterval","clearInterval","isDarkMode","setIsDarkMode","savedMode","localStorage","getItem","JSON","parse","document","body","classList","toggle","setItem","stringify","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","alarm","_id","_c","$RefreshReg$"],"sources":["/Users/andytruong/motion-alarm/react-website-alarm/src/System.js"],"sourcesContent":["import {useEffect, useState } from 'react'\n\nimport AlarmDetails from './AlarmDetails';\nimport './System.css'\n\nconst System = () => {\n    const [alarms, setAlarms] = useState(null);\n    const [logMessage, setLogMessage] = useState('');\n  \n    const fetchAlarmStatus = async () => {\n      try {\n        const response = await fetch('/api/alarmStatus/checkUpdates');\n        if (!response.ok) {\n          throw new Error('Network response was not ok.');\n        }\n        const { logMessage, updatedData } = await response.json();\n        setAlarms(updatedData);\n        setLogMessage(logMessage); // Set the received log message\n      } catch (error) {\n        console.error('Error fetching data:', error.message);\n        // Handle the error (e.g., show a message to the user)\n      }\n    };\n  \n    useEffect(() => {\n      // Fetch alarm status initially\n      fetchAlarmStatus();\n  \n      // Set up interval to poll for updates every 5 seconds\n      const intervalId = setInterval(fetchAlarmStatus, 5000);\n  \n      // Clean up interval on component unmount\n      return () => clearInterval(intervalId);\n    }, []);\n    \n    \n\n\n    const [isDarkMode, setIsDarkMode] = useState(false);\n\n\n    useEffect(() => {\n        // Check for saved preference in local storage\n        const savedMode = localStorage.getItem('darkMode');\n        if (savedMode) {\n            setIsDarkMode(JSON.parse(savedMode));\n        }\n    }, []);\n\n    useEffect(() => {\n        // Update class on the body based on dark mode state\n        document.body.classList.toggle('dark-mode', isDarkMode);\n        document.body.classList.toggle('light-mode', !isDarkMode);\n\n        // Save preference to local storage\n        localStorage.setItem('darkMode', JSON.stringify(isDarkMode));\n    }, [isDarkMode]);\n\n    return (\n        <div className='system'>\n            {/* Display the log message */}\n            {logMessage && <p>Log Message: {logMessage}</p>}\n            <div className = 'statuses'>\n                {alarms && alarms.map((alarm) => (\n                    <AlarmDetails key={alarm._id} alarm={alarm} />\n                ))}\n                </div>\n        </div>\n    )\n}\n\nexport default System\n    "],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}