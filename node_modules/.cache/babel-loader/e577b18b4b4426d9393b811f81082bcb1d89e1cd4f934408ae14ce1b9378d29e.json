{"ast":null,"code":"var _jsxFileName = \"/Users/andytruong/motion-alarm/react-website-alarm/src/User.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './User.css'; // Make sure to import your CSS file\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst User = () => {\n  _s();\n  const [isDarkMode, setIsDarkMode] = useState(false);\n  const [notificationEnabled, setNotificationEnabled] = useState(false);\n  useEffect(() => {\n    // Check for saved preference in local storage\n    const savedMode = localStorage.getItem('darkMode');\n    if (savedMode) {\n      setIsDarkMode(JSON.parse(savedMode));\n    }\n  }, []);\n  useEffect(() => {\n    // Update class on the body based on dark mode state\n    document.body.classList.toggle('dark-mode', isDarkMode);\n    document.body.classList.toggle('light-mode', !isDarkMode);\n\n    // Save preference to local storage\n    localStorage.setItem('darkMode', JSON.stringify(isDarkMode));\n  }, [isDarkMode]);\n  const toggleDarkMode = () => {\n    setIsDarkMode(prevMode => !prevMode);\n  };\n  const toggleNotification = () => {\n    setNotificationEnabled(prev => !prev);\n    if (!notificationEnabled) {\n      // Request permission when enabling notifications\n      if (Notification.permission !== 'granted') {\n        Notification.requestPermission().then(permission => {\n          if (permission === 'granted') {\n            // Permission granted, you can now display notifications\n            new Notification('Notifications Enabled', {\n              body: 'You will now receive notifications.'\n            });\n          }\n        });\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `user ${isDarkMode ? 'dark-mode' : 'light-mode'}`,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"options-box\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        className: \"title\",\n        children: \"User Options\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"dl-toggle\",\n        children: [/*#__PURE__*/_jsxDEV(\"h6\", {\n          children: \"Dark Mode Toggle\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: toggleDarkMode,\n          className: `dark-button ${isDarkMode ? 'dark' : 'light'}`,\n          children: isDarkMode ? 'Light Mode' : 'Dark Mode'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"h6\", {\n          children: \"Notifications\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          className: \"switch\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"checkbox\",\n            checked: notificationEnabled,\n            onChange: toggleNotification\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 59,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"slider round\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 60,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"spacer\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 5\n  }, this);\n};\n_s(User, \"q6brl9NvDxzu/HUIFlJfzbXa6wY=\");\n_c = User;\nexport default User;\nvar _c;\n$RefreshReg$(_c, \"User\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","User","_s","isDarkMode","setIsDarkMode","notificationEnabled","setNotificationEnabled","savedMode","localStorage","getItem","JSON","parse","document","body","classList","toggle","setItem","stringify","toggleDarkMode","prevMode","toggleNotification","prev","Notification","permission","requestPermission","then","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","type","checked","onChange","_c","$RefreshReg$"],"sources":["/Users/andytruong/motion-alarm/react-website-alarm/src/User.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './User.css'; // Make sure to import your CSS file\n\nconst User = () => {\n  const [isDarkMode, setIsDarkMode] = useState(false);\n  const [notificationEnabled, setNotificationEnabled] = useState(false);\n\n  useEffect(() => {\n    // Check for saved preference in local storage\n    const savedMode = localStorage.getItem('darkMode');\n    if (savedMode) {\n      setIsDarkMode(JSON.parse(savedMode));\n    }\n  }, []);\n\n  useEffect(() => {\n    // Update class on the body based on dark mode state\n    document.body.classList.toggle('dark-mode', isDarkMode);\n    document.body.classList.toggle('light-mode', !isDarkMode);\n\n    // Save preference to local storage\n    localStorage.setItem('darkMode', JSON.stringify(isDarkMode));\n  }, [isDarkMode]);\n\n  const toggleDarkMode = () => {\n    setIsDarkMode(prevMode => !prevMode);\n  };\n\n  const toggleNotification = () => {\n    setNotificationEnabled(prev => !prev);\n    if (!notificationEnabled) {\n      // Request permission when enabling notifications\n      if (Notification.permission !== 'granted') {\n        Notification.requestPermission().then(permission => {\n          if (permission === 'granted') {\n            // Permission granted, you can now display notifications\n            new Notification('Notifications Enabled', {\n              body: 'You will now receive notifications.'\n            });\n          }\n        });\n      }\n    }\n  };\n\n  return (\n    <div className={`user ${isDarkMode ? 'dark-mode' : 'light-mode'}`}>\n      <div className=\"options-box\">\n        <h3 className=\"title\">User Options</h3>\n\n        <div className=\"dl-toggle\">\n          <h6>Dark Mode Toggle</h6>\n          <button onClick={toggleDarkMode} className={`dark-button ${isDarkMode ? 'dark' : 'light'}`}>\n            {isDarkMode ? 'Light Mode' : 'Dark Mode'}\n          </button>\n          <h6>Notifications</h6>\n          {/* Toggle switch for notifications */}\n          <label className=\"switch\">\n            <input type=\"checkbox\" checked={notificationEnabled} onChange={toggleNotification} />\n            <span className=\"slider round\"></span>\n          </label>\n        </div>\n      </div>\n      <div className=\"spacer\"></div>\n    </div>\n  );\n};\n\nexport default User;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}